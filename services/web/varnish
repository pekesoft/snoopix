#!/bin/sh

#----------------------------------------------------------------------
# Script para la instalación y mantenimiento de Varnish.
#----------------------------------------------------------------------
# Copyright © 2018 by Peke Soft, Ltd. 03-01-2017.
#----------------------------------------------------------------------

# Cargamos el sistema de inicialización del framework de Snoopix.
# TODO

# Creación de la marca de instalación
CreateVarnishMark (){

  cat <<- EOF > /etc/snoopix/packages/varnish
  # Fichero de marca autogenerado por Snoopix.
	EOF

}

# Método para instalar o reinstalar Varnish.
InstallVarnish () {

  #Comprobamos que exista la marca de instación.
  if [ -f /etc/snoopix/packages/varnish ]; then

    #Informamos al usuario y vemos qué hacemos
    Reinstall varnish

  else

    #Si no existe la marca es instalación limpia.
    Install varnish

  fi

}

# Método para desinstalar Varnish.
RemoveVarnish (){

  #Eliminamos Varnish y los ficheros de configuración.
  Remove varnish

}


#Método para configurar Varnish y mantenerlo a la escucha.
ConfigVarnish (){

  cat <<- EOF > /etc/varnish/default.vcl

    # Fichero de configuración autogenerado por Snoopix.

    # This is an example VCL file for Varnish.
    #
    # It does not do anything by default, delegating control to the
    # builtin VCL. The builtin VCL is called when there is no explicit
    # return statement.
    #
    # See the VCL chapters in the Users Guide at https://www.varnish-cache.org/docs/
    # and https://www.varnish-cache.org/trac/wiki/VCLExamples for more examples.

    # Marker to tell the VCL compiler that this VCL has been adapted to the
    # new 4.0 format.
    vcl 4.0;

    # Default backend definition. Set this to point to your content server.
    backend default {
        .host = "127.0.0.1";
    #    .port = "80";
        .port = "8080";
        .first_byte_timeout = 1800s;
        .between_bytes_timeout = 1800s;
        .max_connections = 800;
    }

    sub vcl_recv {
        # Happens before we check if we have this in cache already.
        #
        # Typically you clean up the request here, removing cookies you don't need,
        # rewriting the request, etc.
    }

    sub vcl_backend_response {
        # Happens after we have read the response headers from the backend.
        #
        # Here you clean the response headers, removing silly Set-Cookie headers
        # and other mistakes your backend does.
    }

    sub vcl_deliver {
        # Happens when we have all the pieces we need, and are about to send the
        # response to the client.
        #
        # You can do accounting or modifying the final object here.
    }
  EOF

}
