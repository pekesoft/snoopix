#!/bin/bash

#----------------------------------------------------------------------
# [EN] Main Snoopix framework script
# [ES] Script principal del framework de Snoopix.
#----------------------------------------------------------------------
# Copyright © 2018 by Peke Soft, Ltd. Licensed under CC-NC-SA
#----------------------------------------------------------------------
# Coded & Designed by ChuxMan (chuxman@pekesoft.com)
#----------------------------------------------------------------------

# Set current version
CopyrightYear="2020"
SnoopixVersion="1.0.0 Alpha 1 (OCT 2020)"

# Check if there's a previous framework loaded
if [ $Snoopix ]; then
  return
fi

#----------------------------------------------------------------------
# Screen Calcs for Whiptail. Based on raspi-config
#----------------------------------------------------------------------
CalcScreen() {

  #----------------------------------------------------------------------
  # Original comment on raspi-config:
  #----------------------------------------------------------------------
  # NOTE: it's tempting to redirect stderr to /dev/null, so supress error
  # output from tput. However in this case, tput detects neither stdout or
  # stderr is a tty and so only gives default 80, 24 values
  #----------------------------------------------------------------------

  ScreenLines=$(tput lines)
  ScreenHeight=$(($ScreenLines-6)) #18
  ScreenCols=$(tput cols)
  ScreenWidth=$(tput cols)

  if [ "$ScreenWidth" -lt 120 ]; then
    ScreenWidth=$(($ScreenWidth-4))
  fi
  if [ -z "$ScreenWidth" ] || [ "$ScreenWidth" -lt 81 ]; then
    ScreenWidth=80
  fi
  if [ "$ScreenWidth" -gt 119 ] && [ "$ScreenWidth" -lt 150 ]; then
    ScreenWidth=$(($ScreenWidth-10))
  fi
  if [ "$ScreenWidth" -gt 149 ] && [ "$ScreenWidth" -lt 180 ]; then
    ScreenWidth=$(($ScreenWidth-40))
  fi
  if [ "$ScreenWidth" -gt 179 ]; then
    ScreenWidth=$(($ScreenWidth-50))
  fi
  #ScreenWidth=$(($ScreenWidth-50))
  MenuHeight=$(($ScreenHeight-28))

}

#----------------------------------------------------------------------
# ANSI colors constants for terminal
# Based on https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
#----------------------------------------------------------------------
AnsiColors() {

  #----------------------------------------------------------------------
  # Black        0;30     Dark Gray     1;30
  # Red          0;31     Light Red     1;31
  # Green        0;32     Light Green   1;32
  # Brown/Orange 0;33     Yellow        1;33
  # Blue         0;34     Light Blue    1;34
  # Purple       0;35     Light Purple  1;35
  # Cyan         0;36     Light Cyan    1;36
  # Light Gray   0;37     White         1;37
  #----------------------------------------------------------------------
  # And then use them like this in your script:

  #      .---------- constant part!
  #      vvvv vvvv-- the code from above
  # Red='\033[0;31m'

  # printf "I ${Red}love${NoColor} Snoopix\n"

  # if you are using the echo command, be sure to use the -e flag to allow backslash escapes.
  # echo -e "I ${Red}love${NC} Snoopix"
  #----------------------------------------------------------------------

  Black='\033[0;30m'
  Red='\033[0;31m'
  Green='\033[0;32m'
  Orange='\033[0;33m'
  Brown=$Orange
  Blue='\033[0;34m'
  Purple='\033[0;35m'
  Cyan='\033[0;36m'
  LightGray='\033[0;37m'

  DarkGray='\033[1;30m'
  LightRed='\033[1;31m'
  LightGreen='\033[1;32m'
  Yellow='\033[1;33m'
  LightBlue='\033[1;34m'
  LightPurple='\033[1;35m'
  LightCyan='\033[1;36m'
  White='\033[1;37m'

  NoColor='\033[0m'
  NC=$NoColor
}

#----------------------------------------------------------------------
# Get System Version and distribution
# Based on https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
#----------------------------------------------------------------------
SystemVersion() {

  # Kernel Version, for example: 4.15.0-10-generic
  KernelVersion=$(uname -r)

  # Machine name, for example: MyComputer
  MachineName=$(uname -n)

  # Architecture, for example: x86_64
  Architecture=$(uname -m)

  # System Type, for example: darwin, linux
  SystemType=$(uname -s)

  # If SystemType is not darwin, then get release variables.
  if [ $SystemType != "darwin" ]; then

    # Include system release.
    . /etc/os-release
  fi

  DebugInfo="Snoopix v$SnoopixVersion | $MachineName | $SystemType ($KernelVersion $Architecture) | $NAME $VERSION"
}

UpdateTimeStamp () {
  TimeStamp=$(date --rfc-3339='seconds')
  TimeStamp="[$TimeStamp] "
}

# Herramientas para pintar avisos y mensajes en consola.

PrintAd () {
  if [ ! -z "$2" ]; then
    SubText="${Cyan}[$1]${NoColor} $2"
  else
    SubText="${NC}$1"
  fi
  UpdateTimeStamp
  printf "${Blue}[INFO]${NoColor}  $TimeStamp $SubText\n"
}

PrintError () {
  if [ ! -z "$2" ]; then
    SubText="${Yellow}[$1]${NoColor} $2"
  else
    SubText="${NC}$1"
  fi

  UpdateTimeStamp
  printf "${Red}[ERROR]${NoColor} $TimeStamp $SubText\n"
}

PrintWarning () {
  if [ ! -z "$2" ]; then
    SubText="${Yellow}[$1]${NoColor} $2"
  else
    SubText="${NC}$1"
  fi

  UpdateTimeStamp
  printf "${Orange}[WARN]${NoColor}  $TimeStamp $SubText\n"
}

PrintInfo () {
  if [ ! -z "$2" ]; then
    SubText="${Yellow}[$1]${NoColor} $2"
  else
    SubText="${NC}$1"
  fi

  UpdateTimeStamp
  printf "${LightGreen}[INFO]${NoColor}  $TimeStamp $SubText\n"
}

# Basado en la info de https://profesorweb.es/2018/10/pausa-en-script-de-linux/
Pause () {
  UpdateTimeStamp
  printf "${Orange}[WAIT]${NoColor}  $TimeStamp ${White}"

  if [ -n "$1" ]; then
    if [ "$1" -gt 0 ]; then
      #Si se establece el tiempo, se lo pasamos al parámetro
      read -rsp $"Pulsa cualquier tecla o espera $1 segundos para continuar..." -n 1 -t $1;
    else
      #Si se pone el parámetro a 0 se anula el tiempo y simplemente se espera a que pulse una tecla.
      read -rsp $"Pulsa cualquier tecla para continuar..." -n 1;  
    fi

  else
    #En cualquier otro caso, el tiempo por defecto es 5 segundos.
    read -rsp $"Pulsa cualquier tecla o espera 5 segundos para continuar..." -n 1 -t 5;
  fi

  printf "\n"
}

#----------------------------------------------------------------------
# Main Init Script
#----------------------------------------------------------------------

# Load Screen Sizes
CalcScreen

# Set ANSI colors
AnsiColors

# Get System version
SystemVersion

# Snoopix Display Info
Logo="   ___ _ __   ___   ___  _ __ (_)_  __\n \
 / __| '_ \ / _ \ / _ \| '_ \| \ \/ /\n \
 \__ \ | | | (_) | (_) | |_) | |>  <\n \
 |___/_| |_|\___/ \___/| .__/|_/_/\_\ \n \
                       |_|"
                       
LogoVersion="$Logo v.$SnoopixVersion | www.snoopix.org \n"
Copyright="\n\nCopyright (c) 2011-$CopyrightYear By Peke Soft, Ltd. | Madrid | All Rights Reserved | www.pekesoft.com \
           \nLicensed under CC-NC-SA | Git: https://www.github.com/pekesoft/snoopix"
Info="\n\nSnoopix es un sistema automatizado de administración y mantenimiento de sistemas Linux o compatibles, incluyendo macOS (BSD) y WSL."
LogoCopyright="$LogoVersion $Copyright"
LogoInfo="$LogoCopyright $Info"

# Set Global variable to avoid recursive loads.
Snoopix=1